Activity 12.3: Interview Questions

	Question 1: Faulty Firewall (Network Security)

		The first step when troubleshooting a firewall that allows all SSH connections, instead of only specific or white-listed IP's in an Azure cloud instance should be the Network Security Groups (NSG).
 		
 		A simple example  could be a jump-box scenario.  All of the machines inside your cloud instance are only alllow SSH access from the Jump-Box virtual IP.  Your jump-box would also have a white-list
 that includes the public IP of your host machine.  A Pre-Shared Key (PSK) is usually used to authenticate in this instance instead of an actual password; however the RSA key should also be password protected.  These simple rules would only allow you access to your jump-box, and therefore your cloud environment.

 		The NSG are the equivalent of firewall or iptables in that they control the flow of traffic; including but not limited to: source and destination IP, source and destination port, TCP or UDP 
 traffic, among others.  One might also consider using a static IP address for the jump-box, to allow easier access.  Static IP address configurations can be found in the "Public IP" configuration portion of azure.  To make sure you applied your NSG's correctly, you should try connecting from a host that is not whitelisted on the jump-box.  If any of your cloud instance VM's have public IP addresses you should also test SSH connections to them.  You could use a VPN to achieve this or even your cell phone, as SSH programs exist for free on Android and iOS.

 		Clear advantages of this technique are a network that is almost completely immune to attacks.  There is never a guranteed 100% secure in cyber-security; however this is about as close as you could 
 ever possibly hope to achieve.  However, a very big drawback to this setup is that is anyone should ever gain access to your jump-box VM; they would have complete 100% access to your cloud instance. They would be able start/stop services, gather and extract PII if any is available, anything the attacker wanted to do.  As a precaution you should also run some sort of logging software such as the ELK stack.  Elk has specific "beats" or modules that allow logging of different services from login attempts to cpu and ram utilization.  The logs are all sent to a remote ELK instance or VM, and can be viewed from a publically accessible IP or from the virtual network, your choice.


 	Question 2: Cloud Access Control (Cloud Security Domain)

 		To control access to an Azure cloud instance, you should deply the proper inbound security rules for the attached Network Security Group.  Once a subnet has been created inside the Virtual Network 
 group, you can attach this subnet to a specific set of rules known as a Network Security Group (NSG).  These rules deny by default, and any traffic that you want to allow must be white-listed.  You should also go the extra step of setting up Application firewalls on the cloud Virtual Machines, such as firewalld or ufw.  These application firewalls also include a set of rules that can deny/allow only specific traffic on designated ports.  They can even allow only one IP access to any given port, with only TCP or UDP traffic.

 		In this specific instance I used a jump-box that only allowed SSH access on port 22 from my public IP.  From the jump-box i used an Ansible Docker container to gain access to every other VM in my
 cloud environment.  Everything was on the same Virtual Network, except for the ELK VM which had its own Virtual Network and Subnet.  All the machines in the cloud environment were in the same resource groupo, and therefore shared one NSG.  The inbound rules for the NSG included allowing only my public IP access to the jump-box and Kibana web server.  It also allowed only the virtual IP 10.0.0.4 (jump-box IP) access to the rest of the virtual network via SSH.  This allowed me to use Ansible to setup all the remote Virtual Machines (web servers and ELK VM) using an automated script that i wrote.
 You could also use a VPN provider, and allow that public IP access instead of your personal public IP.  This would further encrypt all your traffic, adding another layer of security.


 	Question 3:  Setting Alerts in a New Monitoring System (Logging and Networking)

 		One should consider many alerts when setting up a new system, depending on the purpse of the system.  Things like failed login attempts, ram usage, CPU usage, will probably always want to be
 monitored.  A few failed login attempts is no big deal, but when you have repeated attempts, this sort of activity should be flagged.  Every network is different though, so a base line of regular traffic should be established prior to any alerts on network thoroughput.  This also applies for ram/cpu usage.  Having a spike in cpu/ram usage in peak hours is to be expected, as well as network thoroughput. 
 		In my Azure could environment I had 3 web servers all hosting the Damn Vulnerable Web App (DVWA) behind a publically listed load balancer.  The load balancer while having a public IP, was only
 accessible by my machine due to the rules set in the NSG.  The ELK machine also had its own public IP, and was also accessed exclusively by my public IP and the virtual subnet.  The DVWA machines should not be publically accessible because they are designed to be vulnerable hosts and full of exploits.  Any unauthorized access attempts to these machines should raise an alert.